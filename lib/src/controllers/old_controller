/*
import 'package:appreposteria/src/model/user_model.dart';
import 'package:appreposteria/src/navigation/routes.dart';
import 'package:appreposteria/src/ui/auth/auth_screen.dart';
import 'package:appreposteria/src/ui/auth/login_screen.dart';
import 'package:appreposteria/src/ui/store/storehome_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class AuthController extends GetxController {

  static AuthController instance = Get.find();
  static AuthController to = Get.find();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  void onReady() async{
    super.onReady();
  }
    @override
  void onClose() {
    super.onClose();
  }
  handleAuthChanged(_firebaseUser) async {
    //get user data from firestore
    if (_firebaseUser?.uid != null) {
       if( await isAdmin()){
         Get.to(Container());
       }else{

       }
    }

    if (_firebaseUser == null) {
      print('Send to signin');
      Get.offAll(AuthenticScreen());
    } else {
      Get.offAll(HomePage());
    }
  }
    // Firebase user one-time fetch
    Future<User> get getUser async => _auth.currentUser!;
    // Firebase user a realtime stream
    Stream<User?> get user => _auth.authStateChanges();

  @override
  void onInit() {
    super.onInit();
  }
  @override
  get onStart => super.onStart;

  @override
  get onDelete => super.onDelete;



 Future<String> logIn(String email, String password)async{ 
    String msg;
    try{
    await _auth.signInWithEmailAndPassword(email: email, password: password);
    msg = 'Success';
    }catch (e){
      msg = e.toString();
    }
    return msg;
  }
  Future<String> signUp(String email, String password, String name) async{
    String msg;
    try {
        await _auth.createUserWithEmailAndPassword(email: email, password: password)
        .then((result)async{
        MyUser _newUser = MyUser(
          email: result.user!.email!,
          name: name,
          uid: result.user!.uid
          );
        _createUserFirestore(_newUser, result.user!);

        });
      msg = 'Success';

    } catch (e) {
     msg = e.toString();
    }
    return msg;
  }
    //create the firestore user in users collection
  void _createUserFirestore(MyUser user, User _firebaseUser) {
    _firestore.doc('/users/${_firebaseUser.uid}').set(user.toJson());
    update();
  }
    //check if user is an admin user
  isAdmin() async { 
    bool res = false;
      DocumentSnapshot adminRef =
          await _firestore.collection('admins').doc(_auth.currentUser!.uid).get();
      if (adminRef.exists) {
        res = true;
      } else {
        res = false;
      }
      update();
      return res;
  }
  isUser() async { 
    bool res = false;
      DocumentSnapshot adminRef =
          await _firestore.collection('users').doc(_auth.currentUser!.uid).get();
      if (adminRef.exists) {
        res = true;
      } else {
        res = false;
      }
      update();
      return res;
  }

  // Sign out
  Future<void> signOut() {
    return _auth.signOut();
  }

}



*/